## Avoiding duplicate articles in feeds

Sometimes you subscribe to a blog feed and suddenly face a bunch of posts that have already been read but look new to your feed reader. Has this ever happened to you? There are a number of reasons for this, but of course, you wouldn't want it to happen to readers of your own blog, would you?

To help us avoid this annoyance, each entry in a feed generated by the `atom_feed` builder now has a new `:id` option, which allows you to customize the id.

	atom_feed({ :id => 'tag:nomedojogo.com,2008:test/' }) do |feed|
	  feed.title("My great blog!")
	  feed.updated((@posts.first.created_at))

	  for post in @posts
	    feed.entry(post, :id => "tag:nomedojogo.com,2008:" + post.id.to_s) do |entry|
	      entry.title(post.title)
	      entry.content(post.body, :type => 'html')

	      entry.author do |author|
	        author.name("Carlos Brando")
	      end
	    end
	  end
	end

If you do it this way, even if you have to rewrite some portion of the code that generates your feeds, or make some major alteration in your site's content, the **id** created for each entry will remain the same, causing users' feed readers not to duplicate old entries.

Your readers will thank you.

## Adding processing instructions to XML documents

A new option has been included in the `atom_feed` method. You can now include XML processing instructions. Here is an example:

	atom_feed(:schema_date => '2008', :instruct => {
		'xml-stylesheet' => {
			:href=> 't.css', :type => 'text/css'
		}
	}) do |feed|
		# ...
	end

XML processing instructions are read by the application that requested the file. They are usually used to inform the application how it should manipulate the XML data.

In the example above, I'm telling the application receiving the XML that it should display the XML with a specific CSS stylesheet. Here is the result:

	<?xml-stylesheet type="text/css" href="t.css"?>